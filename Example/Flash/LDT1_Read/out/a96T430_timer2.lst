C51 COMPILER V9.60.0.0   a96T428_TIMER2                                                    11/20/2024 17:19:28 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE a96T428_TIMER2
OBJECT MODULE PLACED IN .\out\a96T428_timer2.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE src\a96T428_timer2.c LARGE OPTIMIZE(0,SPEED) REGFILE(.\out\a96T428_LDT1_
                    -Read.ORC) BROWSE INCDIR(.\src) DEBUG OBJECTEXTEND PRINT(.\out\a96T428_timer2.lst) TABS(2) OBJECT(.\out\a96T428_timer2.ob
                    -j)

line level    source

   1          /**
   2           *******************************************************************************
   3           * @file        a96T428_timer2.c
   4           * @author      ABOV R&D Division
   5           * @brief       Timer2
   6           *
   7           * Copyright 2020 ABOV Semiconductor Co.,Ltd. All rights reserved.
   8           *
   9           * This file is licensed under terms that are found in the LICENSE file
  10           * located at Document directory.
  11           * If this file is delivered or shared without applicable license terms,
  12           * the terms of the BSD-3-Clause license shall be applied.
  13           * Reference: https://opensource.org/licenses/BSD-3-Clause
  14           ******************************************************************************/
  15          
  16          
  17          /*******************************************************************************
  18          * Included File
  19          *******************************************************************************/
  20          #include "a96T428_timer2.h"
  21          
  22          /*******************************************************************************
  23          * Private Pre-processor Definition & Macro
  24          *******************************************************************************/
  25          
  26          /*******************************************************************************
  27          * Private Typedef
  28          *******************************************************************************/
  29          
  30          /*******************************************************************************
  31          * Private Variable
  32          *******************************************************************************/
  33          
  34          /*******************************************************************************
  35          * Private Function Prototype
  36          *******************************************************************************/
  37          bit fTimer2_int=0;
  38          
  39          /*******************************************************************************
  40          * Public Function
  41          *******************************************************************************/
  42          
  43          /**
  44          * @brief    Initialize timer2 peripheral
  45          * @param   mode   This parameter contains the mode of timer.
  46          *
  47          *         - T2_COUNTER_MODE           = 0
  48          *         - T2_CAPTURE_MODE           = 1
  49          *         - T2_PPG_ONESHOT_MODE           = 2
  50          *         - T2_PPG_REPEAT_MODE          = 3
  51          * @param   freq This parameter contains the selection of frequency.
  52          *
  53          *         - TIMER2_DIV512             = 0
C51 COMPILER V9.60.0.0   a96T428_TIMER2                                                    11/20/2024 17:19:28 PAGE 2   

  54          *         - TIMER2_DIV128             = 1
  55          *         - TIMER2_DIV32              = 2
  56          *         - TIMER2_DIV8               = 3
  57          *         - TIMER2_DIV4             = 4
  58          *         - TIMER2_DIV2             = 5
  59          *         - TIMER2_DIV1             = 6
  60          *         - TIMER2_T1_A_MATCH = 7
  61          * @return   None
  62          */
  63          void Timer2_Initial(uint8_t mode, uint8_t freq)
  64          {
  65   1        uint8_t temp_reg, temp_reg2;
  66   1        
  67   1        temp_reg = T2CRH;
  68   1        /* Set timer mode & frequency source */
  69   1        temp_reg &= ~(0x3 << 4);
  70   1        temp_reg |= ((mode << 4) | (0x1 << 0));
  71   1        
  72   1        temp_reg2 = T2CRL;
  73   1        temp_reg2 &= ~((0x7 << 5) | (0x1 << 0));
  74   1        if(mode >= T2_PPG_ONESHOT_MODE)
  75   1          temp_reg2 |= (freq << 5);
  76   1        else
  77   1          temp_reg2 |= ((freq << 5) | (0x1 << 0));
  78   1        
  79   1        T2CRH = temp_reg;
  80   1        T2CRL = temp_reg2;
  81   1      }
  82          
  83          /**
  84          * @brief   Set Timer2 Counter mode operation
  85          * @param   match_count    This parameter contains the value of timer match count(0~0xFFFF).
  86          * @return   None
  87          */
  88          void Timer2_SetMatchCounter(uint16_t match_count) 
  89          {
  90   1        T2ADR = match_count;
  91   1      }
  92          
  93          /**
  94          * @brief   Set Timer2 PPG Polarity
  95          * @param   polarity   This parameter contains the value of polarity.
  96          *
  97          *         - T2_START_HIGH             = 0
  98          *         - T2_START_LOW              = 1
  99          * @return   None
 100          */
 101          void Timer2_SetPPGPolarity(uint8_t polarity) 
 102          {
 103   1        uint8_t temp_reg;
 104   1        
 105   1        temp_reg = T2CRL;
 106   1        temp_reg &= ~(0x04); 
 107   1        temp_reg |= (polarity << 2);
 108   1        
 109   1        T2CRL = temp_reg;
 110   1      }
 111          
 112          /**
 113          * @brief   Set Timer2 PPG mode duty counter
 114          * @param   count    This parameter contains the value of timer duty count(0~0xFFFF).
 115          * @return   None
C51 COMPILER V9.60.0.0   a96T428_TIMER2                                                    11/20/2024 17:19:28 PAGE 3   

 116          */
 117          void Timer2_SetPPGDutyCounter(uint16_t count) 
 118          {
 119   1        T2BDR = count;
 120   1      }
 121          
 122          /**
 123          * @brief   Set Timer2 PPG mode period counter
 124          * @param   count    This parameter contains the value of timer period count(1~0xFFFF).
 125          * @return   None
 126          */
 127          void Timer2_SetPPGPeriodCounter(uint16_t count) 
 128          {
 129   1        T2ADR = count;
 130   1      }
 131          
 132          
 133          /**
 134          * @brief   Get Timer2 Capture mode operation
 135          * @param   None
 136          * @return   The value of timer capture data(16bit)
 137          */
 138          uint16_t Timer2_GetCaptureValue(void) 
 139          {
 140   1        return T2BDR;
 141   1      }
 142          
 143          /**
 144          * @brief   Clear the value of Timer2 counter data 
 145          * @param   None
 146          * @return   None
 147          */
 148          void Timer2_ClearCountData(void) 
 149          {
 150   1        T2CRH |= 0x01;
 151   1      }
 152          
 153          /**
 154          * @brief    Start Timer2 operation
 155          * @param   None
 156          * @return   None
 157          */
 158          void Timer2_Start(void) 
 159          {
 160   1        T2CRH |= 0x80;
 161   1      }
 162          
 163          /**
 164          * @brief    Stop Timer2 operation
 165          * @param   None
 166          * @return   None
 167          */
 168          void Timer2_Stop(void) 
 169          {
 170   1        T2CRH &= ~0x80;
 171   1      }
 172          
 173          /**
 174          * @brief    Configure Timer2 interrupt
 175          * @param   enable   This parameter contains the enable of timer interrupt
 176          *
 177          *         - FLASE                       = 0
C51 COMPILER V9.60.0.0   a96T428_TIMER2                                                    11/20/2024 17:19:28 PAGE 4   

 178          *         - TRUE                        = 1
 179          * @return   None
 180          */
 181          void Timer2_ConfigureInterrupt(uint8_t enable) 
 182          {
 183   1        if(enable)
 184   1          IE2 |= 0x08;
 185   1        else
 186   1          IE2 &= ~0x08;
 187   1      }
 188          
 189          /**
 190          * @brief    Claer Timer2 interrupt
 191          * @param   None
 192          * @return   None
 193          */
 194          void Timer2_ClearInterruptFlag(void) 
 195          {
 196   1        T2CRL &= ~0x10;
 197   1      }
 198          
 199          void Timer2_Int_Flag_Polling(void) 
 200          {
 201   1        if(T2CRL & T2IFR) 
 202   1        {
 203   2          T2CRL &= ~T2IFR; 
 204   2          fTimer2_int=1;
 205   2        }
 206   1      }
 207          
 208          /* --------------------------------- End Of File ------------------------------ */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    337    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     13    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
