C51 COMPILER V9.60.7.0   a96T428_ADC                                                       01/09/2025 13:29:41 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE a96T428_ADC
OBJECT MODULE PLACED IN .\out\a96T428_adc.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\..\Driver\a96T428_adc.c LARGE OPTIMIZE(8,SPEED) BROWSE NOAREGS INCDIR
                    -(..\..\Driver;.\src) DEBUG OBJECTEXTEND PRINT(.\out\a96T428_adc.lst) TABS(2) OBJECT(.\out\a96T428_adc.obj)

line level    source

   1          /**
   2           *******************************************************************************
   3           * @file        a96T428_adc.c
   4           * @author      ABOV R&D Division
   5           * @brief       Analog-to-Digital Convertor
   6           *
   7           * Copyright 2020 ABOV Semiconductor Co.,Ltd. All rights reserved.
   8           *
   9           * This file is licensed under terms that are found in the LICENSE file
  10           * located at Document directory.
  11           * If this file is delivered or shared without applicable license terms,
  12           * the terms of the BSD-3-Clause license shall be applied.
  13           * Reference: https://opensource.org/licenses/BSD-3-Clause
  14           ******************************************************************************/
  15          
  16          /*******************************************************************************
  17          * Included File
  18          *******************************************************************************/
  19          #include "a96T428_adc.h"
  20          
  21          /*******************************************************************************
  22          * Private Pre-processor Definition & Macro
  23          *******************************************************************************/
  24          
  25          /*******************************************************************************
  26          * Private Typedef
  27          *******************************************************************************/
  28          
  29          /*******************************************************************************
  30          * Private Variable
  31          *******************************************************************************/
  32          uint8_t adc_count = 0;
  33          uint16_t *adc_buff;
  34          uint8_t buff_cnt = 0;
  35          /*******************************************************************************
  36          * Private Function Prototype
  37          *******************************************************************************/
  38          
  39          /*******************************************************************************
  40          * Public Function
  41          *******************************************************************************/
  42          
  43          /**
  44          * @brief    Initialize ADC peripheral
  45          * @param   clock_sel      This parameter contains the selection of ADC converter clock (fx <= 8MHz).
  46          *
  47          *     - ADC_CLK_DIV1    = 0
  48          *     - ADC_CLK_DIV2    = 1
  49          *     - ADC_CLK_DIV4    = 2
  50          *     - ADC_CLK_DIV8    = 3
  51          * @param   trigger_sel    This parameter contains the selection of ADC trigger source.
  52          *
  53          *     - ADC_SW_TRIG   = 0
  54          *     - ADC_T1_TRIG     = 1
C51 COMPILER V9.60.7.0   a96T428_ADC                                                       01/09/2025 13:29:41 PAGE 2   

  55          *     - ADC_T3_TRIG     = 2
  56          *     - ADC_EXT0_TRIG     = 3
  57          *     - ADC_EXT8_TRIG   = 4
  58          * @param   ref_voltage    This parameter contains the selection of ADC reference voltage.
  59          *
  60          *     - ADC_INTERNAL_REF  = 0
  61          *     - ADC_EXTERNAL_REF  = 1
  62          * @param   align_sel    This parameter contains the selection of ADC data align. 
  63          *
  64          *     - ADC_MSB       = 0
  65          *     - ADC_LSB       = 1
  66          * @return   None
  67          */
  68          
  69          volatile uint32_t ttt;
  70          void ADC_Initial(uint8_t clock_sel, uint8_t trigger_sel, uint8_t ref_voltage, uint8_t align_sel)
  71          {
  72   1          /*  The A/D converter needs at least 8 us for conversion time.
  73   1              So you must set the conversion time more than 8 us.
  74   1              If the ADC conversion time is set short, the resolution is degraded.
  75   1          
  76   1              ** ADC Conversion clock = ADCLK * 60 cycles
  77   1              
  78   1              fx=16Mhz, CKSEL =  fx/4 = 0.25us
  79   1              60 clock x 0.25us = 15us at 4Mhz (16Mhz/4)
  80   1          */
  81   1        uint8_t temp_reg, temp_reg2;
  82   1        
  83   1        temp_reg = ADCCRH;
  84   1        temp_reg &= ~(0xFF);
  85   1        temp_reg |= ((trigger_sel << 3) | (align_sel << 2) | (clock_sel << 0));
  86   1        
  87   1        temp_reg2 = ADCCRL;
  88   1        temp_reg2 &= ~(0xF0);
  89   1        temp_reg2 |= ((1 << 7) | (ref_voltage << 5));  //ADC Enable + ref_Voltage
  90   1        
  91   1        ADCCRH = temp_reg;
  92   1        ADCCRL = temp_reg2;
  93   1        
  94   1        ttt=Clock_GetSystemFreq();
  95   1        ttt>>= clock_sel;
  96   1        //while( !((Clock_GetSystemFreq() >> clock_sel) < 7500000) )
  97   1        {
  98   2          NOP;  // NOTE : system clock / div < 7.5Mhz
  99   2        }
 100   1          
 101   1      }
 102          
 103          /**
 104          * @brief    Enables or disables the ADC peripheral.
 105          * @param   enable   This parameter contains the enable of this function. 
 106          *
 107          *     - FALSE   = 0
 108          *     - TRUE    = 1
 109          * @return   None
 110          */
 111          void ADC_Enable(uint8_t enable)
 112          {
 113   1        if(enable == TRUE)
 114   1        {
 115   2          ADCCRL |= (1 << 7);
 116   2        }
C51 COMPILER V9.60.7.0   a96T428_ADC                                                       01/09/2025 13:29:41 PAGE 3   

 117   1        else
 118   1        {
 119   2          ADCCRL &= ~(1 << 7);
 120   2        }
 121   1      }
 122          
 123          /**
 124          * @brief    Enables the ADC Start conversion(For software trigger).
 125          * @param      None
 126          * @return   None
 127          */
 128          void ADC_StartSoftwareTrigger()
 129          {
 130   1        P2IO|=(1<<0); P20=!P20; 
 131   1        ADCCRL |= (1 << 6);
 132   1      }
 133          
 134          /**
 135          * @brief    Select the ADC Converter Input Channel.
 136          * @param   channel    This parameter contains the channel of ADC input.
 137          *
 138          *     - ADC_CH0   = 0
 139          *     - ADC_CH1   = 1
 140          *     - ADC_CH2   = 2
 141          *     - ADC_CH3   = 3
 142          *     - ADC_CH4   = 4
 143          *     - ADC_CH5   = 5
 144          *     - ADC_CH6   = 6
 145          *     - ADC_CH7   = 7
 146          *     - ADC_CH8 = 8
 147          *     - ADC_CH9   = 9
 148          *     - ADC_CH10  = 10
 149          *     - ADC_CH11  = 11
 150          *     - ADC_CH12  = 12
 151          *     - ADC_CH13  = 13
 152          *     - ADC_CH14  = 14
 153          *     - ADC_CH15  = 15
 154          * @return   None
 155          */
 156          void ADC_SelectChannel(uint8_t channel)
 157          {
 158   1        uint8_t temp_reg;
 159   1        
 160   1        temp_reg = ADCCRL;
 161   1        temp_reg &= ~(0xF << 0);
 162   1        temp_reg |= channel;
 163   1        
 164   1        ADCCRL = temp_reg;
 165   1      }
 166          
 167          /**
 168          * @brief    Get status of ADC conversion.
 169          * @param   None
 170          * @return   Status of ADC conversion flag.
 171          */
 172          uint8_t ADC_GetConversionStatus()
 173          {
 174   1        return (ADCCRL & 0x10);
 175   1      }
 176          
 177          /**
 178          * @brief    Get data of ADC conversion for ADC interrupt.
C51 COMPILER V9.60.7.0   a96T428_ADC                                                       01/09/2025 13:29:41 PAGE 4   

 179          * @param   adc_data   This parameter contains the data of conversion ADC.
 180          * @param   count    This parameter contains the number of count.
 181          * @return   None
 182          */
 183          void ADC_GetDataWithInterrupt(uint16_t *adc_data, uint8_t count)
 184          {
 185   1        adc_count = count;
 186   1        adc_buff = (uint16_t*)adc_data;
 187   1        buff_cnt = 0;
 188   1        
 189   1        ADC_ConfigureInterrupt(TRUE);
 190   1      
 191   1        if( ((ADCCRH & 0x38) == 0x00)) //SW trigger
 192   1        {
 193   2          ADC_StartSoftwareTrigger();
 194   2        }
 195   1        
 196   1        while(0 < adc_count);  //adc interrupt subroutine execute
 197   1        ADC_ConfigureInterrupt(FALSE);
 198   1      }
 199          
 200          /**
 201          * @brief    Get data of ADC conversion for ADC polling.
 202          * @param   adc_data   This parameter contains the data of conversion ADC.
 203          * @param   count    This parameter contains the number of count.
 204          * @return   None
 205          */
 206          void ADC_GetDataWithPolling(uint16_t *adc_data, uint8_t count)
 207          {
 208   1        uint8_t i;
 209   1        
 210   1        for(i = 0; i < count; i++)
 211   1        {
 212   2          if( ((ADCCRH & 0x38) == 0x00) ) //SW trigger
 213   2            ADC_StartSoftwareTrigger();
 214   2            
 215   2          while(!(ADCCRL & 0x10)); //while(!(ADC_GetConversionStatus()));   
 216   2          P21=!P21; P2IO|=(1<<1);
 217   2            
 218   2          adc_data[i] = ADCDR;
 219   2        }
 220   1      }
 221          
 222          /**
 223          * @brief    Configure the enable or disable ADC interrupt.
 224          * @param   enable   This parameter contains the enable of this function. 
 225          *
 226          *     - FALSE = 0
 227          *     - TRUE  = 1
 228          * @return   None
 229          */
 230          void ADC_ConfigureInterrupt(uint8_t enable)
 231          {
 232   1        if(enable == TRUE)
 233   1        {
 234   2          IE3  |= 0x01; 
 235   2        }
 236   1        else
 237   1        {
 238   2          ADCCRH &= ~0x80;
 239   2          IE3 &= ~0x01;
 240   2        }
C51 COMPILER V9.60.7.0   a96T428_ADC                                                       01/09/2025 13:29:41 PAGE 5   

 241   1      }
 242          
 243          /**
 244          * @brief    Clear the ADC interrupt status.
 245          * @param      None
 246          * @return   None
 247          */
 248          void ADC_ClearInterruptStatus()
 249          {
 250   1        ADCCRH &= ~0x80;
 251   1      }
 252          
 253          
 254          void ADC_Int_Handler(void) interrupt ADC_VECT
 255          {
 256   1        P21=!P21; P2IO|=(1<<1);
 257   1        if(adc_count) 
 258   1        {
 259   2          adc_count--;
 260   2          adc_buff[buff_cnt++] = ADCDR;
 261   2      
 262   2          if(((ADCCRH & 0x38) == 0x00) && (adc_count != 0)) //SW trigger
 263   2          { 
 264   3            ADC_StartSoftwareTrigger();   
 265   3          }
 266   2        }
 267   1          
 268   1        //ADC_ClearInterruptStatus();
 269   1      }
 270          
 271          /* --------------------------------- End Of File ------------------------------ */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    386    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      9       7
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
